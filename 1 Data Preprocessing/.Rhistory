edist<-function(x1,x2)
{
d=sqrt(sum((x1-x2)^2))
return(d)
}
means<-function(cdata,size=5)
{
mx=numeric(size)
my=numeric(size)
for(i in 1:5)
{
clus=subset(cdata,cdata[,3]==i)
mx[i]=mean(clus[,1])
my[i]=mean(clus[,2])
}
m=matrix(c(mx,my),nrow=5,ncol=2)
return(m)
}
sse<-function(cdata)
{
center = means(cdata)
ss = 0
for(i in 1:nrow(center)){
clus = subset(cdata,cdata[,3]==i)
clust = clus[,1:2]
mean = center[i,1:2]
for(j in 1:nrow(clust))
{
x = edist(mean,clust[j,1:2])
ss =  (ss+x)
}
}
return (ss)
}
#k-means
concat = concat_all[,c(1,2)]
dim(concat)
results = kmeans(concat,5)
results
nrow(results$centers)
table(concat_all[,3],results$randomsizes)
plot(concat[,1],concat[,2],xlab="X",ylab="Y",main="K-means",col=results$randomsizes)
library("dbscan", lib.loc="~/R/win-library/3.4")
install.packages("dbscan")
install.packages("MASS")
library("dbscan", lib.loc="~/R/win-library/3.4")
clustersizes<- sample(50:100,5)
library(MASS)
#   NORMAL DISTRIBUTION 1
n1<-data.frame(mvrnorm(clustersizes[1],mu=c(-6,-6),Sigma = diag(2)),rep(1))
names(n1)<-c("x","y","class")
plot(x=n1$x,y=n1$y,pch=20)
# NORMAL DISTRIBUTION 2
#dia= matrix(c(4,2,2,9),nrow = 2)
n2<-data.frame(mvrnorm(clustersizes[2],mu=c(-5,0),Sigma = diag(2)),rep(2))
names(n2)<-c("x","y","class")
plot(x=n2$x,y=n2$y,pch=20)
# NORMAL DISTRIBUTION 3
#dia=matrix(c(4,1,1,9),nrow = 2)
n3<-data.frame(mvrnorm(clustersizes[3],mu=c(-1,-5),Sigma = diag(2)),rep(3))
names(n3)<-c("x","y","class")
plot(x=n3$x,y=n3$y,pch=20)
#combining all three normal distribtion
normal<-rbind(n1,n2,n3)
plot(x=normal$x,y=normal$y,pch=20)
# EXPONENTIAL DISTRIBUTION
x1<-data.frame(rexp(clustersizes[4],rate = 1.5))
names(x1)<-c("x")
x2<-data.frame(rexp(clustersizes[4],rate =0.8 ),rep(4))
names(x2)<-c("y","class")
exponential<-cbind(x1,x2)
plot(x=exponential$x,y=exponential$y,pch=20)
# UNIFORM DISTRIBUTION
x1<-data.frame(runif(clustersizes[5],min =-6 , max = -1))
names(x1)<-c("x")
x2<-data.frame(runif(clustersizes[5],min = 3,max = 5),rep(5))
names(x2)<-c("y","class")
uniform<-cbind(x1,x2)
# final dataset
final<- rbind(normal,exponential,uniform)
mycol=c("red", "blue", "green","black", "magenta")
plot(x=final$x,y=final$y,col=mycol[final$class],pch=20,xlab = "x-coordinate",ylab = "y-coordinate",main="final dataset " )
legend("topleft",legend=levels(factor(final$class)),pch=20,col=mycol)
text(8,-10,"No. of data points :")
text(13,-10,sum(clustersizes))
##legend("bottom",legend = c("nd1","nd2","nd3","nd4","nd5"),col = final$class,cex=0.8)
##creating purity function
purity<-function(clust,w)
{
n<-w
resultq<-clust
## confusion matrix
t1<-table( resultq,final$class)
colnames(t1)<-c("t1","t2","t3","t4","t5")
each<-sample(1:n,n)
## intialization of array
for(i in 1:n)
{
each[i]=0
}
##calculating purity
for(i in 1:n)
{
for(j in 1:5)
{
if(each[i]<t1[i,j])
each[i]=t1[i,j]
}
}
s1<-sum(each)
total<-sum(clustersizes)
purity<-s1/total
}
# k-means
result1<-kmeans(final[,1:2],5)
result1
library(cluster)
kpurity<-purity(result1$cluster,5)
kpurity
##kmeans sse
sse<-0
for(i in 1:nrow(final))
{
sse<-sse+ (result1$center[result1$cluster[i]]-final[i,1])^2+(result1$center[result1$cluster[i],2]-final[i,2])^2
}
sse
nrow(final)
clusteris<-array(dim=c(1))
for(i in 1:nrow(final))
{
}
mycol=c("red", "blue", "green","black", "magenta")
plot(x=final$x,y=final$y,col=mycol[result1$cluster],pch=20,xlim=c(-10,6),ylim=c(-10,10),xlab = "x-coordinate",ylab = "y-coordinate",main="kmeans " )
legend("topleft",legend=levels(factor(result1$cluster)),pch=20,col=mycol)
text(x=5,y=-5,labels=paste("Purity =",kpurity))
text(x=5,y=-8.7,labels=paste("SSE =", sse))
## hierarchical clustering
library(cluster)
clusters <- hclust(dist(final[,1:2]))
clusters
plot(clusters)
result2<-cutree(clusters,5)
hpurity<-purity(result2,5)
hpurity
##hierarchical sse
ax<-numeric(5)
ay<-numeric(5)
an<-numeric(5)
for(i in 1:nrow(final))
{
ax[result2[i]]<-ax[result2[i]]+final[i,1]
ay[result2[i]]<-ay[result2[i]]+final[i,2]
an[result2[i]]<-an[result2[i]]+1
}
for(i in 1:5)
{ax[i]<-ax[i]/an[i]
ay[i]<-ay[i]/an[i]}
sseh<-0
for(i in 1:nrow(final))
{
sseh<-sseh+ (ax[result2[i]]-final[i,1])^2+(ay[result2[i]]-final[i,2])^2
}
sseh
mycol=c("red", "blue", "green","black", "magenta")
plot(x=final$x,y=final$y,col=mycol[result2],pch=20,xlim=c(-10,10),ylim=c(-10,10),xlab = "x-coordinate",ylab = "y-coordinate",main="hierarchical clustering " )
legend("topleft",legend=levels(factor(result2)),pch=20,col=mycol)
text(x=5,y=-5,labels=paste("Purity =",hpurity))
text(x=5,y=-8.7,labels=paste("SSE =", sseh))
##creating dbscan purity function
puritydb<-function(clust,w)
{
n<-w
resultq<-clust
## confusion matrix
t1<-table( resultq,final$class)
colnames(t1)<-c("t1","t2","t3","t4","t5")
each<-numeric(n+1)
##calculating purity
for(i in 1:n+1)
{
for(j in 1:5)
{
if(each[i]<t1[i-1,j])
each[i]=t1[i-1,j]
}
}
s1<-sum(each)
total<-sum(clustersizes)
purity<-s1/total
}
##density based clustering
library(fpc)
library(plyr)
result3<-fpc::dbscan(final[,1:2],eps = 1,MinPts = 8)
#plot(x=final$x,y=final$y,col=result3$cluster,xlab = "x-coordinate",ylab = "y-coordinate",main="dbscan")
a1<-count(result3$cluster)
n<-max(a1$x)
n
dbpurity<-puritydb(result3$cluster,n)
dbpurity
##density sse
axd<-numeric(n+1)
ayd<-numeric(n+1)
and<-numeric(n+1)
for(i in 1:nrow(final))
{  axd[result3$cluster[i]+1]<-axd[result3$cluster[i]+1]+final[i,1]
ayd[result3$cluster[i]+1]<-ayd[result3$cluster[i]+1]+final[i,2]
and[result3$cluster[i]+1]<-and[result3$cluster[i]+1]+1
}
for(i in 1:n+1)
{ axd[i]<-axd[i]/and[i]
ayd[i]<-ayd[i]/and[i]
}
ssed<-0
for(i in 1:nrow(final))
{
ssed<-ssed+ (axd[result3$cluster[i]+1]-final[i,1])^2+(ayd[result3$cluster[i]+1]-final[i,2])^2
}
ssed
mycol=c("red", "blue", "green","black", "magenta","brown","white")
plot(x=final$x,y=final$y,col=mycol[result3$cluster],pch=20,xlim=c(-10,10),ylim=c(-10,10),xlab = "x-coordinate",ylab = "y-coordinate",main="density based " )
legend("topleft",legend=levels(factor(result3$cluster)),pch=20,col=mycol)
text(x=5,y=-5,labels=paste("Purity =",dbpurity))
text(x=5,y=-8.7,labels=paste("SSE =", ssed))
clustersizes<- sample(50:100,5)
library(MASS)
#   NORMAL DISTRIBUTION 1
n1<-data.frame(mvrnorm(clustersizes[1],mu=c(-6,-6),Sigma = diag(2)),rep(1))
names(n1)<-c("x","y","class")
plot(x=n1$x,y=n1$y,pch=20)
# NORMAL DISTRIBUTION 2
#dia= matrix(c(4,2,2,9),nrow = 2)
n2<-data.frame(mvrnorm(clustersizes[2],mu=c(-5,0),Sigma = diag(2)),rep(2))
names(n2)<-c("x","y","class")
plot(x=n2$x,y=n2$y,pch=20)
# NORMAL DISTRIBUTION 3
#dia=matrix(c(4,1,1,9),nrow = 2)
n3<-data.frame(mvrnorm(clustersizes[3],mu=c(-1,-5),Sigma = diag(2)),rep(3))
names(n3)<-c("x","y","class")
plot(x=n3$x,y=n3$y,pch=20)
#combining all three normal distribtion
normal<-rbind(n1,n2,n3)
plot(x=normal$x,y=normal$y,pch=20)
# EXPONENTIAL DISTRIBUTION
x1<-data.frame(rexp(clustersizes[4],rate = 1.5))
names(x1)<-c("x")
x2<-data.frame(rexp(clustersizes[4],rate =0.8 ),rep(4))
names(x2)<-c("y","class")
exponential<-cbind(x1,x2)
plot(x=exponential$x,y=exponential$y,pch=20)
# UNIFORM DISTRIBUTION
x1<-data.frame(runif(clustersizes[5],min =-6 , max = -1))
names(x1)<-c("x")
x2<-data.frame(runif(clustersizes[5],min = 3,max = 5),rep(5))
names(x2)<-c("y","class")
uniform<-cbind(x1,x2)
# final dataset
final<- rbind(normal,exponential,uniform)
mycol=c("red", "blue", "green","black", "magenta")
plot(x=final$x,y=final$y,col=mycol[final$class],pch=20,xlab = "x-coordinate",ylab = "y-coordinate",main="final dataset " )
legend("topleft",legend=levels(factor(final$class)),pch=20,col=mycol)
text(8,-10,"No. of data points :")
text(13,-10,sum(clustersizes))
##creating dbscan purity function
puritydb<-function(clust,w)
{
n<-w
resultq<-clust
## confusion matrix
t1<-table( resultq,final$class)
colnames(t1)<-c("t1","t2","t3","t4","t5")
each<-numeric(n+1)
##calculating purity
for(i in 1:n+1)
{
for(j in 1:5)
{
if(each[i]<t1[i-1,j])
each[i]=t1[i-1,j]
}
}
s1<-sum(each)
total<-sum(clustersizes)
purity<-s1/total
}
##density based clustering
library(fpc)
library(plyr)
result3<-fpc::dbscan(final[,1:2],eps = 1,MinPts = 8)
#plot(x=final$x,y=final$y,col=result3$cluster,xlab = "x-coordinate",ylab = "y-coordinate",main="dbscan")
a1<-count(result3$cluster)
n<-max(a1$x)
n
dbpurity<-puritydb(result3$cluster,n)
dbpurity
##density sse
axd<-numeric(n+1)
ayd<-numeric(n+1)
and<-numeric(n+1)
for(i in 1:nrow(final))
{  axd[result3$cluster[i]+1]<-axd[result3$cluster[i]+1]+final[i,1]
ayd[result3$cluster[i]+1]<-ayd[result3$cluster[i]+1]+final[i,2]
and[result3$cluster[i]+1]<-and[result3$cluster[i]+1]+1
}
for(i in 1:n+1)
{ axd[i]<-axd[i]/and[i]
ayd[i]<-ayd[i]/and[i]
}
ssed<-0
for(i in 1:nrow(final))
{
ssed<-ssed+ (axd[result3$cluster[i]+1]-final[i,1])^2+(ayd[result3$cluster[i]+1]-final[i,2])^2
}
ssed
mycol=c("red", "blue", "green","black", "magenta","brown","white")
plot(x=final$x,y=final$y,col=mycol[result3$cluster],pch=20,xlim=c(-10,10),ylim=c(-10,10),xlab = "x-coordinate",ylab = "y-coordinate",main="density based " )
legend("topleft",legend=levels(factor(result3$cluster)),pch=20,col=mycol)
text(x=5,y=-5,labels=paste("Purity =",dbpurity))
text(x=5,y=-8.7,labels=paste("SSE =", ssed))
data = c(1,2,3,4,5)
data1 = 1:5
data2 = rep(c(1,2),3)
mat = matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
attach(iris)
iris
plot(density(iris$Sepal.Width), main = "Density of Sepal Width")
rug(iris$Sepal.Width)
hist(iris$Sepal.Length, main = "Histogram of sepal length")
attach(mtcars)
mtcars
# Simple Scatterplot
plot(wt, mpg, main="Scatterplot Example", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
# Simple Histogram
hist(mtcars$mpg)
# Colored Histogram with Different Number of Bins
hist(mtcars$mpg, breaks=12, col="red")
# Simple Bar Plot
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", xlab="Number of Gears")
# Stacked Bar Plot with Colors and Legend
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
# Line charts
x <- c(1:5); y <- x # create some data
par(pch=22, col="red") # plotting symbol and color
par(mfrow=c(2,4)) # all plots on one page
opts = c("p","l","o","b","c","s","S","h")
for(i in 1:length(opts)){
heading = paste("type=",opts[i])
plot(x, y, type="n", main=heading)
lines(x, y, type=opts[i])
}
par(mfrow=c(1,1)) # all plots on one page
# Simple Pie Chart
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
# Pie Chart with Percentages
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
# 3D Exploded Pie Chart
library(plotrix)
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie3D(slices,labels=lbls,explode=0.1,
main="Pie Chart of Countries ")
# Boxplot of MPG by Car Cylinders
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
# convert factor to numeric for convenience
Orange$Tree <- as.numeric(Orange$Tree)
ntrees <- max(Orange$Tree)
# get the range for the x and y axis
xrange <- range(Orange$age)
yrange <- range(Orange$circumference)
# set up the plot
plot(xrange, yrange, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
colors <- rainbow(ntrees)
linetype <- c(1:ntrees)
plotchar <- seq(18,18+ntrees,1)
# add lines
for (i in 1:ntrees) {
tree <- subset(Orange, Tree==i)
lines(tree$age, tree$circumference, type="b", lwd=1.5,
lty=linetype[i], col=colors[i], pch=plotchar[i])
}
# add a title and subtitle
title("Tree Growth", "example of line plot")
# add a legend
legend(xrange[1], yrange[2], 1:ntrees, cex=0.8, col=colors,
pch=plotchar, lty=linetype, title="Tree")
read_mydf <- read.csv(file = "C:\Users\Yogesh Kushwah\Desktop\mcs\perfume_data.xlsx", header = FALSE)
read_mydf
read_mydf <- read.csv(file = "\Users\Yogesh Kushwah\Desktop\mcs\perfume_data.xlsx", header = FALSE)
read_mydf <- read.csv(file = "\users\Yogesh Kushwah\Desktop\mcs\perfume_data.xlsx", header = FALSE)
library(readxl)
perfume_data <- read_excel("C:/Users/Yogesh Kushwah/Desktop/mcs/perfume_data.xlsx")
View(perfume_data)
View(perfume_data)
final <- as.data.frame(matrix(nrow=20,ncol=28))
for(j in 1:8){
value<- mean(dataframe[j,])
final[j,]<-value
}
x=perfume_data
matrixVar(x, xmean)
attch(perfume_data)
attch(perfume_data.xlsx)
attach(perfume_data.xlsx)
attach(perfume_data)
data=perfume_data
matrixVar(x, xmean)
boxplot(mpg~cyl,data=perfume_data, main="boxplot",
xlab="perfume", ylab="type")
boxplot(mpg~cyl,data=perfume_data, main="boxplot",
xlab="perfume", ylab="quantity")
avg = apply(perfume_data,1,mean,na.rm=TRUE)
avg
counts <- table(perfume_data)
barplot(perfume_data, main="Perfume Distribution", xlab="Number of perfume")
counts <- table(perfume_data$rose)
barplot(counts, main="Perfume Distribution", xlab="Number of perfume")
counts <- table(perfume_data$64558)
barplot(counts, main="Perfume Distribution", xlab="Number of perfume")
# Simple Bar Plot
counts <- table(mtcars$gear)
barplot(counts, main="perfume distribution", xlab="number of perfume")
summary(perfume_data)
mean(perfume_data[,c(1:28)]
x=mean(perfume_data[,c(1:28)]
mean(perfume_data[,c(1:28)]
mean
x=mean(perfume_data[,c(1:28)]
x=mean(perfume_data[,c(1:28)]
x=mean(perfume_data[,c(2:28)]
x=mean(perfume_data[,c(2:28)]
x=mean(perfume_data[,c(2:20)]
x=mean(perfume_data[,c(2:20)]
attach(mtcars)
mtcars
perfume_data
boxplot(mpg~cyl,data=perfume_data$<dbl>, main="boxplot",
xlab="perfume", ylab="quantity")
a=perfume_data$rose
a
?apply
row.sums <- apply(x, 1, perfume_data)
mean = apply(tmp[,c(2:3)],1,mean)
boxplot(mpg~cyl,data=perfume_data, main="boxplot",
xlab="perfume", ylab="quantity")
?apply
boxplot(mpg~cyl,data=perfume_data, main="boxplot",
xlab="perfume", ylab="quantity")
barplot(perfume_data, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
barplot(perfume_data, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(perfume_data))
barplot(perfume_data, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(perfume_data))
data_frame$means <- apply(perfume_data, 1, mean)
attach(perfume_data)
attach(perfume_data)
perfume_data
library(readxl)
perfume_data <- read_excel("C:/Users/Yogesh Kushwah/Desktop/mcs/perfume_data.xlsx")
attach(perfume_data)
colMeans(perfume_data[, 2:3])
colMeans(perfume_data[, 2:28])
x=colMeans(perfume_data[, 2:28])
plot(x)
barplot(x)
x=rowMeans(perfume_data[, 2:28])
barplot(x)
q()
version
version
version
install.packages("hypergraph")
install.packages("installr") # install installr
library(installr) #load
updateR()
version
q()
install.packages("hypergraph")
install.packages("hypergraph")
install.packages("h2o")
install.packages("bioconductor")
install.packages("hypergraph")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hypergraph", version = "3.8")
require(hypergraph)
q()
dataset = read.csv('Data.csv')
setwd("H:/GitHub/Machine-Learning/Machine-Learning/Part 1 - Data Preprocessing")
dataset = read.csv('Data.csv')
